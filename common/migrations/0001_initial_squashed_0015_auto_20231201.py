# Generated by Django 5.1 on 2024-08-14 11:30

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import common.fields
import common.utils


class Migration(migrations.Migration):

    initial = True
    replaces = [
        ("common", "0001_initial"),
        ("common", "0002_auto_20160531"),
        ("common", "0003_auto_20160801"),
        ("common", "0004_auto_20161219"),
        ("common", "0005_auto_20170214"),
        ("common", "0006_auto_20170905"),
        ("common", "0007_auto_20180210"),
        ("common", "0008_auto_20180302"),
        ("common", "0009_auto_20181010"),
        ("common", "0010_auto_20181202"),
        ("common", "0011_auto_20190201"),
        ("common", "0012_auto_20210420"),
        ("common", "0013_auto_20210620"),
        ("common", "0014_auto_20210701"),
        ("common", "0015_auto_20231201"),
    ]
    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GroupMetaData",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                        verbose_name="données",
                    ),
                ),
                (
                    "group",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metadata",
                        to="auth.group",
                        verbose_name="groupe",
                    ),
                ),
            ],
            options={
                "verbose_name": "métadonnées de groupe",
                "verbose_name_plural": "métadonnées de groupes",
            },
        ),
        migrations.CreateModel(
            name="History",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="date"),
                ),
                (
                    "restoration_date",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="dernière restauration",
                    ),
                ),
                (
                    "restored",
                    models.BooleanField(editable=False, null=True, verbose_name="restauré"),
                ),
                (
                    "data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        editable=False,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                        verbose_name="données",
                    ),
                ),
                (
                    "data_size",
                    models.PositiveIntegerField(editable=False, verbose_name="taille données"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("C", "Création"),
                            ("U", "Modification"),
                            ("D", "Suppression"),
                            ("R", "Restauration"),
                            ("M", "Many-to-many"),
                        ],
                        editable=False,
                        max_length=1,
                        verbose_name="statut",
                    ),
                ),
                (
                    "object_id",
                    models.TextField(editable=False, verbose_name="identifiant"),
                ),
                ("object_uid", models.UUIDField(editable=False, verbose_name="UUID")),
                ("object_str", models.TextField(editable=False, verbose_name="entité")),
                (
                    "reason",
                    models.TextField(blank=True, editable=False, null=True, verbose_name="motif"),
                ),
                (
                    "admin",
                    models.BooleanField(default=False, editable=False, verbose_name="admin"),
                ),
                (
                    "fields_count",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="modifications",
                    ),
                ),
                (
                    "collector_update",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        editable=False,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                        verbose_name="mises à jour",
                    ),
                ),
                (
                    "collector_delete",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        editable=False,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                        verbose_name="suppressions",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="contenttypes.contenttype",
                        verbose_name="type d'entité",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="histories",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "historique",
                "verbose_name_plural": "historiques",
            },
        ),
        migrations.CreateModel(
            name="HistoryField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="date"),
                ),
                (
                    "restoration_date",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="dernière restauration",
                    ),
                ),
                (
                    "restored",
                    models.BooleanField(editable=False, null=True, verbose_name="restauré"),
                ),
                (
                    "data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        editable=False,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                        verbose_name="données",
                    ),
                ),
                (
                    "data_size",
                    models.PositiveIntegerField(editable=False, verbose_name="taille données"),
                ),
                (
                    "field_name",
                    models.CharField(editable=False, max_length=100, verbose_name="nom du champ"),
                ),
                (
                    "old_value",
                    models.TextField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="ancienne valeur",
                    ),
                ),
                (
                    "new_value",
                    models.TextField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="nouvelle valeur",
                    ),
                ),
                (
                    "status_m2m",
                    models.CharField(
                        blank=True,
                        choices=[("C", "Purge"), ("A", "Ajout"), ("R", "Suppression")],
                        editable=False,
                        max_length=1,
                        null=True,
                        verbose_name="statut M2M",
                    ),
                ),
                (
                    "editable",
                    models.BooleanField(default=True, editable=False, verbose_name="éditable"),
                ),
                (
                    "history",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fields",
                        to="common.history",
                        verbose_name="historique",
                    ),
                ),
            ],
            options={
                "verbose_name": "historique de champ modifié",
                "verbose_name_plural": "historiques de champs modifiés",
            },
        ),
        migrations.CreateModel(
            name="MetaData",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.TextField(verbose_name="identifiant")),
                ("key", models.CharField(max_length=100, verbose_name="clé")),
                (
                    "value",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                        verbose_name="valeur",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "deletion_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date de suppression"),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="contenttypes.contenttype",
                        verbose_name="type d'entité",
                    ),
                ),
            ],
            options={
                "verbose_name": "métadonnée",
                "verbose_name_plural": "métadonnées",
            },
        ),
        migrations.CreateModel(
            name="ServiceUsage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="nom")),
                (
                    "count",
                    models.PositiveIntegerField(default=0, verbose_name="nombre"),
                ),
                (
                    "limit",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="limite"),
                ),
                (
                    "reset",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("H", "Toutes les heures"),
                            ("D", "Tous les jours"),
                            ("W", "Toutes les semaines"),
                            ("M", "Tous les mois"),
                            ("Y", "Tous les ans"),
                        ],
                        max_length=1,
                        verbose_name="réinitialisation",
                    ),
                ),
                (
                    "reset_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date réinitialisation"),
                ),
                ("address", models.CharField(max_length=40, verbose_name="adresse")),
                ("date", models.DateTimeField(auto_now=True, verbose_name="date")),
                (
                    "extra",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                        verbose_name="extra",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usages",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "utilisation de service",
                "verbose_name_plural": "utilisation des services",
            },
        ),
        migrations.CreateModel(
            name="UserMetaData",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                        verbose_name="données",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metadata",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "métadonnées d'utilisateur",
                "verbose_name_plural": "métadonnées d'utilisateurs",
            },
        ),
        migrations.CreateModel(
            name="Webhook",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="nom"),
                ),
                ("url", models.URLField(verbose_name="url")),
                (
                    "method",
                    models.CharField(
                        choices=[("post", "POST"), ("put", "PUT"), ("patch", "PATCH")],
                        default="post",
                        max_length=5,
                        verbose_name="method",
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        choices=[("json", "JSON"), ("xml", "XML"), ("yaml", "YAML")],
                        default="json",
                        max_length=4,
                        verbose_name="format",
                    ),
                ),
                (
                    "authorization",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Basic", "Basic"),
                            ("Digest", "Digest"),
                            ("Token", "Token"),
                            ("Bearer", "Bearer"),
                            ("JWT", "JWT"),
                        ],
                        max_length=6,
                        null=True,
                        verbose_name="authentification",
                    ),
                ),
                (
                    "token",
                    models.TextField(blank=True, null=True, verbose_name="token"),
                ),
                (
                    "timeout",
                    models.PositiveSmallIntegerField(default=30, verbose_name="délai d'attente"),
                ),
                (
                    "retries",
                    models.PositiveSmallIntegerField(default=0, verbose_name="tentatives"),
                ),
                (
                    "delay",
                    models.PositiveSmallIntegerField(default=0, verbose_name="délai entre tentatives"),
                ),
                (
                    "is_create",
                    models.BooleanField(default=True, verbose_name="création"),
                ),
                (
                    "is_update",
                    models.BooleanField(default=True, verbose_name="modification"),
                ),
                (
                    "is_delete",
                    models.BooleanField(default=True, verbose_name="suppression"),
                ),
                (
                    "is_restore",
                    models.BooleanField(default=True, verbose_name="restauration"),
                ),
                (
                    "is_m2m",
                    models.BooleanField(default=True, verbose_name="many-to-many"),
                ),
                (
                    "types",
                    models.ManyToManyField(blank=True, to="contenttypes.contenttype", verbose_name="types"),
                ),
            ],
            options={
                "verbose_name": "webhook",
                "verbose_name_plural": "webhooks",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Global",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "object_id",
                    models.TextField(editable=False, verbose_name="identifiant"),
                ),
                (
                    "object_uid",
                    models.UUIDField(editable=False, unique=True, verbose_name="UUID"),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="contenttypes.contenttype",
                        verbose_name="type d'entité",
                    ),
                ),
            ],
            options={
                "verbose_name": "globale",
                "verbose_name_plural": "globales",
                "unique_together": {("content_type", "object_id")},
            },
        ),
        migrations.AddIndex(
            model_name="history",
            index=models.Index(fields=["content_type", "object_id"], name="common_history_gfk_idx"),
        ),
        migrations.AddIndex(
            model_name="metadata",
            index=models.Index(fields=["content_type", "object_id"], name="common_metadata_gfk_idx"),
        ),
        migrations.AddIndex(
            model_name="metadata",
            index=models.Index(
                fields=["content_type", "object_id", "deletion_date"],
                name="common_metadata_gfk_idx2",
            ),
        ),
        migrations.AddIndex(
            model_name="metadata",
            index=models.Index(
                fields=["content_type", "object_id", "deletion_date", "key"],
                name="common_metadata_gfk_idx3",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="metadata",
            unique_together={("content_type", "object_id", "key")},
        ),
        migrations.AlterUniqueTogether(
            name="serviceusage",
            unique_together={("name", "user")},
        ),
    ]
